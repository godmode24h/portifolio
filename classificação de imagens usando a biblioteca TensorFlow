import tensorflow as tf
from tensorflow import keras

# Carregando o conjunto de dados de imagens
(x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()

# Normalizando as imagens
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# Convertendo as categorias em vetores de one-hot encoding
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Definindo a arquitetura da rede neural
model = keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation='relu', padding='same', input_shape=x_train.shape[1:]),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Conv2D(64, (3,3), activation='relu', padding='same'),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Flatten(),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

# Compilando o modelo
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Treinando o modelo
model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))

# Avaliando o modelo
test_loss, test_acc = model.evaluate(x_test, y_test)
print('Test accuracy:', test_acc)
